The tabletop environment has a robot arm and several objects. The robot sits at (0, 0), faces positive x-axis, while positive z-axis points up.

{task}. Remember {note}.

The robot has the following primitive actions, where each primitive action can take a list of objects and parameters as input:
- pick([obj], {}): pick up obj, with no parameters.
- place([obj], {"x": [0.00, 1.00], "y": [-1.00, 1.00],"z": [0.0, 0.05], "theta": [-3.14, 3.14]}): place obj at location (x, y, z) with planar rotation theta, where x ranges (0.0, 1.0), y ranges (-1.0, 1.0), z ranges (0.0, 0.05), and theta ranges (-3.14, 3.14).

The initial environment state is: 
{state}


You are an AI robot that sample parameters for the given plan of symbolic actions to reach the goal. You will be given a domain description and the trace of generated plans that lead to motion failure.

{domain_desc}

The given plan of symbolic actions: {symbolic_plan}

The trace is: {trace}

Please generate output step-by-step, which includes:
1. Reasoning: Your reasoning for the failure of last plan with sampled parameters if the last plan exists, and the strategy to re-generate new action parameters for the symbolic actions to construct a feasible plan. Make sure you account for the dimensions of different objects.
2. Full Plan: The new full plan with the action parameters you generate. Make sure you properly reflect the above reasoning in the new plan. The plan should be a full plan that includes all the actions from the beginning to the end.
Please organize the output following the json format below:
{
    "Reasoning": "My reasoning for the failure of last sampled parameters is ...",
    "Full Plan": ["pick(['green_bowl'], {})", "place(['green_bowl'], {'x': 0.51, 'y': 0.02, 'theta': 0.00})", ...]
}
Your output in json is :
